// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
//const truffleAssert = require("truffle-assertions");
var SupplyChain = artifacts.require("SupplyChain");

contract("SupplyChain", function(accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  var sku = 1;
  var ndc = 123401;
  const ownerID = accounts[0];
  const manufacturerID = accounts[1];
  const productID = "1234-02-b6e4a58d";
  const productDescription = "Atorvastatin Calcium";
  const productFormName = "Tablet";
  const productLabelerName = "Dr.Reddys";

  var itemState = 1;
  const distributorID = accounts[2];
  const pharmacistID = accounts[3];
  const emptyAddress = "0x00000000000000000000000000000000000000";

  ///Available Accounts
  ///==================
  ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
  ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
  ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
  ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
  ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
  ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
  ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
  ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
  ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
  ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

  console.log("ganache-cli accounts used here...");
  console.log("Contract Owner: accounts[0] ", accounts[0]);
  console.log("Manufacturer: accounts[1] ", accounts[1]);
  console.log("Distributor: accounts[2] ", accounts[2]);
  console.log("Pharmacist: accounts[3] ", accounts[3]);

  // 1st Test
  it("Testing smart contract function manufactureItem() that allows a manufacturer to manuacture the drug", async () => {
    const supplyChain = await SupplyChain.deployed();
    const manufacturerID = accounts[1];
    const ndc = 123403;
    const productID = "1234-03-b6e4a58d";
    const productDescription = "Ciplar";
    const productFormName = "Tablet";
    const productLabelerName = "Sun Pharma";
    const productPrice = web3.toWei(1, "ether");
    var eventEmitted = false;

    // Mark an item as Manufactured by calling function manufactureItem()
    // var event = supplyChain.Manufactured();
    // await event.watch((err, res) => {
    //   eventEmitted = true;
    // });

    let tx = await supplyChain.manufactureItem(
      ndc,
      manufacturerID,
      productID,
      productDescription,
      productFormName,
      productLabelerName,
      { from: manufacturerID }
    );

    let event = tx.logs[0].event;
    assert.equal(event, "Manufactured", "Not Manufactured!!!");

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(ndc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(ndc);

    // Verify the result set
    assert.equal(resultBufferOne[0], 0, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], ndc, "Error: Invalid item NDC");
    assert.equal(
      resultBufferOne[2],
      ownerID,
      "Error: Missing or Invalid ownerID"
    );
    assert.equal(
      resultBufferOne[3],
      manufacturerID,
      "Error: Missing or Invalid manufacturerID"
    );
    assert.equal(
      resultBufferOne[4],
      productID,
      "Error: Missing or Invalid productID"
    );
    assert.equal(
      resultBufferOne[5],
      productDescription,
      "Error: Missing or Invalid productDescription"
    );
    assert.equal(
      resultBufferOne[6],
      productFormName,
      "Error: Missing or Invalid productFormName"
    );
    assert.equal(
      resultBufferOne[7],
      productLabelerName,
      "Error: Missing or Invalid productLabelerName"
    );
    assert.equal(
      resultBufferTwo[4],
      productPrice,
      "Error: Missing or Invalid productPrice"
    );

    assert.equal(resultBufferTwo[3], 1, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 2nd Test
  it("Testing smart contract function dispatchItemToDistr() that allows a manufacturer to dispatch item", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var mfrDispatchEvent = false;

    // Watch the emitted event MfrDispatched()
    var event = supplyChain.MfrDispatched();
    await event.watch((err, res) => {
      mfrDispatchEvent = true;
    });

    // Mark an item as MfrDispatched by calling function dispatchItemToDistr()
    await supplyChain.dispatchItemToDistr(ndc, { from: manufacturerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(ndc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(ndc);

    // Verify the result set

    assert.equal(resultBufferTwo[3], 2, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 3rd Test
  it("Testing smart contract function distReceiveItem() that allows a distributor to mark an item as received", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var distrReceiveEvent = false;

    // Watch the emitted event DistrReceived()
    var event = supplyChain.DistrReceived();
    await event.watch((err, res) => {
      distrReceiveEvent = true;
    });

    // Mark an item as DistrReceived by calling function distrReceiveItem()
    await supplyChain.distrReceiveItem(ndc, { from: distributorID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(ndc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(ndc);

    // Verify the result set

    assert.equal(resultBufferTwo[3], 3, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 4th Test
  it("Testing smart contract function dispatchItemToPharmacist() that allows a distributor to dispatch item to pharmacist", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var distrDispatchEvent = false;

    // Watch the emitted event DistrDispatched()
    var event = supplyChain.DistrDispatched();
    await event.watch((err, res) => {
      distrDispatchEvent = true;
    });

    // Mark an item as DistrDispatched by calling function dispatchItemToPharmacist()
    let tx = await supplyChain.dispatchItemToPharmacist(ndc, {
      from: distributorID
    });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(ndc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(ndc);

    // Verify the result set

    assert.equal(resultBufferTwo[3], 4, "Error: Invalid item State");
    truffleAssert.eventEmitted(tx, "Distr Dispatched!!!");
  });

  // 5th Test
  it("Testing smart contract function pharReceiveItem() that allows a pharmacist to mark an item as received", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var pharReceiveEvent = false;

    // Watch the emitted event PharReceived()
    var event = supplyChain.PharReceived();
    await event.watch((err, res) => {
      pharReceiveEvent = true;
    });

    // Mark an item as PharReceived by calling function pharReceiveItem()
    await supplyChain.pharReceiveItem(ndc, { from: pharmacistID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(ndc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(ndc);

    // Verify the result set

    assert.equal(resultBufferTwo[3], 5, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 6th Test
  it("Testing smart contract function dispenseToConsumer() that allows a pharmacist to dispense item", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var pharDispenseEvent = false;

    // Watch the emitted event Dispensed()
    var event = supplyChain.Dispensed();
    await event.watch((err, res) => {
      pharDispenseEvent = true;
    });

    // Mark an item as Sold by calling function buyItem()
    await supplyChain.dispenseToConsumer(ndc, { from: pharmacistID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(ndc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(ndc);

    // Verify the result set

    assert.equal(resultBufferTwo[3], 6, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 7th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(ndc);

    // Verify the result set:
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], ndc, "Error: Invalid item NDC");
    assert.equal(
      resultBufferOne[2],
      pharmacistID,
      "Error: Missing or Invalid ownerID"
    );
    assert.equal(
      resultBufferOne[3],
      manufacturerID,
      "Error: Missing or Invalid manufacturerID"
    );
    assert.equal(
      resultBufferOne[4],
      productID,
      "Error: Missing or Invalid productID"
    );
    assert.equal(
      resultBufferOne[5],
      productDescription,
      "Error: Missing or Invalid productDescription"
    );
    assert.equal(
      resultBufferOne[6],
      productFormName,
      "Error: Missing or Invalid productFormName"
    );
    assert.equal(
      resultBufferOne[7],
      productLabelerName,
      "Error: Missing or Invalid productLabelerName"
    );
  });

  // 8th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(ndc);

    // Verify the result set:
    assert.equal(resultBufferTwo[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferTwo[1], ndc, "Error: Invalid item NDC");
    assert.equal(
      resultBufferTwo[2],
      productPrice,
      "Error: Invalid item productPrice"
    );
    assert.equal(resultBufferTwo[3], 6, "Error: Invalid item State");
    assert.equal(
      resultBufferTwo[4],
      distributorID,
      "Error: Missing or Invalid distributerID"
    );
    assert.equal(
      resultBufferTwo[5],
      pharmacistID,
      "Error: Missing or Invalid retailerID"
    );
  });
});
